package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"transport-app/app/adapter/in/graphql/graph/mapper"
	"transport-app/app/adapter/in/graphql/graph/model"
	"transport-app/app/domain"
)

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	fmt.Println("works")
	domainOrders, err := r.SearchOrders(ctx, domain.OrderSearchFilters{})
	if err != nil {
		return nil, err
	}
	var gqlOrders []*model.Order
	for _, o := range domainOrders {
		gqlOrders = append(gqlOrders, mapper.MapOrder(o))
	}
	return gqlOrders, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) Todos(ctx context.Context) ([]*model.Order, error) {
	// Simulamos una respuesta con datos falsos (mock)
	return []*model.Order{
		{
			ID:          "1",
			ReferenceID: "REF123",
		},
		{
			ID:          "2",
			ReferenceID: "REF456",
		},
	}, nil
}
*/
