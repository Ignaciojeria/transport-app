type ContactMethod {
  type: String
  value: String
}

type Document {
  type: String
  value: String
}

type Contact {
  additionalContactMethods: [ContactMethod]
  documents: [Document]
  email: String
  fullName: String
  nationalID: String
  phone: String
}

type AddressInfo {
  addressLine1: String
  addressLine2: String
  contact: Contact
  district: String
  latitude: Float
  longitude: Float
  province: String
  state: String
  timeZone: String
  zipCode: String
}

type NodeInfo {
  referenceId: String
  name: String
}

type Location {
  addressInfo: AddressInfo
  deliveryInstructions: String
  nodeInfo: NodeInfo
}

type TimeRange {
  startTime: String
  endTime: String
}

type CollectAvailabilityDate {
  date: String
  timeRange: TimeRange
}

type Dimension {
  length: Int
  height: Int
  width: Int
  unit: String
}

type Insurance {
  currency: String
  unitValue: Int
}

type Skill {
  type: String
  value: String
  description: String
}

# Quantity mejorado
type Quantity {
  quantityNumber: Int
  quantityDelivered: Int
  quantityUnit: String
}

type Weight {
  unit: String
  value: Int
}

type Item {
  sku: String
  description: String
  dimensions: Dimension
  insurance: Insurance
  skills: [Skill]
  quantity: Quantity
  weight: Weight
}

type Label {
  type: String
  value: String
}

type Package {
  dimensions: Dimension
  insurance: Insurance
  items: [Item]
  labels: [Label]
  lpn: String
  weight: Weight
}

type DateRange {
  startDate: String
  endDate: String
}

type PromisedDate {
  dateRange: DateRange
  serviceCategory: String
  timeRange: TimeRange
}

type Reference {
  type: String
  value: String
}

type KeyValuePair {
  key: String!
  value: String!
}

type OrderType {
  type: String
  description: String
}

type Carrier {
  nationalID: String
  name: String
}

type Vehicle {
  plate: String
}

type Driver {
  nationalID: String
  name: String
  email: String
}

type Route {
  routeID: String
  routePosition: Int
}

# Nuevas estructuras para delivery ðŸšš
type DeliveryFailure {
  detail: String
  reason: String
  referenceID: String
}

type DeliveryLocation {
  latitude: Float
  longitude: Float
}

type DeliveryRecipient {
  fullName: String
  nationalID: String
}

type Delivery {
  status: String
  recipient: DeliveryRecipient
  handledAt: String
  failure: DeliveryFailure
  location: DeliveryLocation
}

# ðŸš› DeliveryUnitsReport final completÃ­simo
type DeliveryUnitsReport {
  referenceID: String!
  collectAvailabilityDate: CollectAvailabilityDate
  destination: Location
  origin: Location
  orderType: OrderType
  package: Package
  promisedDate: PromisedDate
  references: [Reference]
  extraFields: [KeyValuePair!]!
  carrier: Carrier
  vehicle: Vehicle
  driver: Driver
  route: Route
  delivery: Delivery
}

# ðŸ”Ž Filtro
input DeliveryUnitsReportFilterInput {
  referenceIds: [String]
  lpns: [String]
  originNodeReferences: [String]
  commerces: [String]
  consumers: [String]
}

# ðŸ”„ PageInfo y conexiÃ³n Relay
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String!
}

type DeliveryUnitsReportConnection {
  edges: [DeliveryUnitsReportEdge!]!
  pageInfo: PageInfo!
}

type DeliveryUnitsReportEdge {
  cursor: String!
  node: DeliveryUnitsReport!
}

type Query {
  deliveryUnitsReports(
    filter: DeliveryUnitsReportFilterInput, 
    first: Int, 
    after: String, 
    last: Int, 
    before: String
  ): DeliveryUnitsReportConnection!
}
