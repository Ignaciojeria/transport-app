package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"encoding/base64"
	"fmt"

	//	"transport-app/app/adapter/in/graphql/graph/mapper"

	"transport-app/app/adapter/in/graphql/graph/mapper"
	"transport-app/app/adapter/in/graphql/graph/model"
	"transport-app/app/domain"
)

// Orders is the resolver for the orders field.
// Orders es el resolver para el campo orders.
func (r *queryResolver) DeliveryUnitsReports(
	ctx context.Context,
	filter *model.DeliveryUnitsReportFilterInput,
	first *int,
	after *string,
	last *int,
	before *string,
) (*model.DeliveryUnitsReportConnection, error) {
	fmt.Println("executing Orders resolver with filter:", filter)
	requestedFields := CollectSelectedPaths(ctx)
	fmt.Println("Requested fields:", requestedFields)

	// Definir límites
	const maxLimit = 100 // límite máximo razonable para paginación
	limit := 1           // valor por defecto
	if first != nil {
		if *first > maxLimit {
			return nil, fmt.Errorf("requested limit %d exceeds maximum allowed limit of %d", *first, maxLimit)
		}
		limit = *first
	}

	// Procesar cursores si existen
	var afterID, beforeID *string

	if after != nil && *after != "" {
		decoded, err := base64.StdEncoding.DecodeString(*after)
		if err != nil {
			return nil, err
		}
		s := string(decoded)
		afterID = &s
	}

	if before != nil && *before != "" {
		decoded, err := base64.StdEncoding.DecodeString(*before)
		if err != nil {
			return nil, err
		}
		s := string(decoded)
		beforeID = &s
	}

	pagination := domain.Pagination{
		First:  first,
		After:  afterID,
		Last:   last,
		Before: beforeID,
	}

	if err := pagination.IsValid(); err != nil {
		return nil, err
	}

	requestedFieldsAsMap := ConvertSelectedPathsToMap(ctx)

	results, err := r.findDeliveryUnitsProjectionResult(ctx, domain.DeliveryUnitsFilter{
		RequestedFields: requestedFieldsAsMap,
		Pagination:      pagination,
	})
	if err != nil {
		return nil, err
	}

	deliveryUnits := mapper.MapDeliveryUnits(ctx, results)

	// Verificar si hay más páginas
	var hasNextPage bool
	hasNextPage = len(deliveryUnits) > limit
	if hasNextPage {
		deliveryUnits = deliveryUnits[:limit] // quitar el elemento extra
	}

	// Construir edges
	edges := make([]*model.DeliveryUnitsReportEdge, len(deliveryUnits))
	for i, order := range deliveryUnits {
		// Usar el ID del modelo como cursor
		cursor := base64.StdEncoding.EncodeToString([]byte(order.ID))
		edges[i] = &model.DeliveryUnitsReportEdge{
			Cursor: cursor,
			Node:   order,
		}
	}

	// Construir pageInfo con todos los campos requeridos
	var startCursor, endCursor string
	if len(edges) > 0 {
		startCursor = edges[0].Cursor
		endCursor = edges[len(edges)-1].Cursor
	}

	// Determinar hasPreviousPage
	var hasPreviousPage bool
	hasPreviousPage = before != nil

	pageInfo := &model.PageInfo{
		HasNextPage:     hasNextPage,
		HasPreviousPage: hasPreviousPage,
		StartCursor:     &startCursor,
		EndCursor:       endCursor,
	}

	return &model.DeliveryUnitsReportConnection{
		Edges:    edges,
		PageInfo: pageInfo,
	}, nil
}

func ptrString(v string) *string    { return &v }
func ptrInt(v int) *int             { return &v }
func ptrFloat64(v float64) *float64 { return &v }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) Todos(ctx context.Context) ([]*model.Order, error) {
	// Simulamos una respuesta con datos falsos (mock)
	return []*model.Order{
		{
			ID:          "1",
			ReferenceID: "REF123",
		},
		{
			ID:          "2",
			ReferenceID: "REF456",
		},
	}, nil
}
*/
