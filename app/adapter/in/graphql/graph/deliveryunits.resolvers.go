package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"encoding/base64"
	"fmt"
	"strconv"

	//	"transport-app/app/adapter/in/graphql/graph/mapper"

	"transport-app/app/adapter/in/graphql/graph/model"
)

// Orders is the resolver for the orders field.
// Orders es el resolver para el campo orders.
func (r *queryResolver) DeliveryUnitsReports(
	ctx context.Context,
	filter *model.DeliveryUnitsReportFilterInput,
	first *int,
	after *string,
	last *int,
	before *string,
) (*model.DeliveryUnitsReportConnection, error) {
	fmt.Println("executing Orders resolver with filter:", filter)
	requestedFields := CollectSelectedPaths(ctx)
	fmt.Println("Requested fields:", requestedFields)

	// Definir límites
	limit := 10 // valor por defecto
	if first != nil {
		limit = *first
		if limit > 100 {
			limit = 100 // límite máximo
		}
	}

	// Procesar cursor si existe
	var afterID string
	if after != nil {
		decoded, err := base64.StdEncoding.DecodeString(*after)
		if err != nil {
			return nil, err
		}
		afterID = string(decoded)
	}

	// En una implementación real, obtendrías datos de tu repositorio
	// ordersData, err := r.OrderRepository.GetOrders(filter, afterID, limit+1)

	// Por ahora, simulamos datos para demostración
	// Aquí simulamos obtener limit+1 registros para verificar hasNextPage
	ordersData := []*model.DeliveryUnitsReport{
		{
			ReferenceID: "REF123",
			Commerce:    ptrString("kiosclub"),
			Consumer:    ptrString("apikios"),
			Channel:     ptrString("shipconfirm,dispatch,web,mobile"),
			CollectAvailabilityDate: &model.CollectAvailabilityDate{
				Date: ptrString("2025-05-01"),
				TimeRange: &model.TimeRange{
					StartTime: ptrString("08:00"),
					EndTime:   ptrString("18:00"),
				},
			},
			Destination: &model.Location{
				AddressInfo: &model.AddressInfo{
					AddressLine1: ptrString("Avenida Siempre Viva 742"),
					AddressLine2: ptrString("Depto 12B"),
					Contact: &model.Contact{
						AdditionalContactMethods: []*model.ContactMethod{
							{Type: ptrString("phone"), Value: ptrString("+56911111111")},
							{Type: ptrString("whatsapp"), Value: ptrString("+56922222222")},
						},
						Documents: []*model.Document{
							{Type: ptrString("passport"), Value: ptrString("ABC123456")},
						},
						Email:      ptrString("homer.simpson@example.com"),
						FullName:   ptrString("Homer Simpson"),
						NationalID: ptrString("12345678-9"),
						Phone:      ptrString("+56933333333"),
					},
					District:  ptrString("Springfield"),
					Latitude:  ptrFloat64(10.123),
					Longitude: ptrFloat64(20.456),
					Province:  ptrString("Springfield Province"),
					State:     ptrString("Springfield State"),
					TimeZone:  ptrString("America/Santiago"),
					ZipCode:   ptrString("12345"),
				},
				DeliveryInstructions: ptrString("Dejar en la puerta trasera"),
				NodeInfo: &model.NodeInfo{
					ReferenceID: ptrString("NODE-001"),
					Name:        ptrString("Central Warehouse"),
				},
			},
			Origin: &model.Location{
				AddressInfo: &model.AddressInfo{
					AddressLine1: ptrString("Avenida Siempre Viva 742"),
					AddressLine2: ptrString("Bodega Principal"),
					Contact: &model.Contact{
						AdditionalContactMethods: []*model.ContactMethod{
							{Type: ptrString("telegram"), Value: ptrString("@springfield")},
						},
						Documents: []*model.Document{
							{Type: ptrString("driver_license"), Value: ptrString("XYZ987654")},
						},
						Email:      ptrString("warehouse@example.com"),
						FullName:   ptrString("Warehouse Manager"),
						NationalID: ptrString("98765432-1"),
						Phone:      ptrString("+56944444444"),
					},
					District:  ptrString("Springfield"),
					Latitude:  ptrFloat64(30.123),
					Longitude: ptrFloat64(40.456),
					Province:  ptrString("Springfield Province"),
					State:     ptrString("Springfield State"),
					TimeZone:  ptrString("America/Santiago"),
					ZipCode:   ptrString("54321"),
				},
				DeliveryInstructions: ptrString("Cargar en zona 2"),
				NodeInfo: &model.NodeInfo{
					ReferenceID: ptrString("NODE-002"),
					Name:        ptrString("Secondary Warehouse"),
				},
			},
			OrderType: &model.OrderType{
				Type:        ptrString("devolución,entrega,retiro_en_tienda,...."),
				Description: ptrString("Order retiro a cliente,Orden de entrega a cliente"),
			},
			DeliveryUnit: &model.DeliveryUnit{
				Lpn: ptrString("PKG123"),
				Weight: &model.Weight{
					Unit:  ptrString("kg"),
					Value: ptrInt(5),
				},
				Dimensions: &model.Dimension{
					Length: ptrInt(40),
					Height: ptrInt(30),
					Width:  ptrInt(20),
					Unit:   ptrString("cm"),
				},
				Insurance: &model.Insurance{
					Currency:  ptrString("USD"),
					UnitValue: ptrInt(100),
				},
				Items: []*model.Item{
					{
						Sku:         ptrString("SKU-001"),
						Description: ptrString("Producto de prueba"),
						Dimensions: &model.Dimension{
							Length: ptrInt(10),
							Height: ptrInt(10),
							Width:  ptrInt(10),
							Unit:   ptrString("cm"),
						},
						Insurance: &model.Insurance{
							Currency:  ptrString("USD"),
							UnitValue: ptrInt(10),
						},
						Skills: []*model.Skill{
							{
								Type:        ptrString("fragile"),
								Value:       ptrString("yes"),
								Description: ptrString("Manejo delicado"),
							},
						},
						Quantity: &model.Quantity{
							QuantityNumber: ptrInt(1),
							QuantityUnit:   ptrString("unit"),
						},
						Weight: &model.Weight{
							Unit:  ptrString("kg"),
							Value: ptrInt(1),
						},
					},
				},
				Labels: []*model.Label{
					{Type: ptrString("soc"), Value: ptrString("SOC-0001")},
				},
			},
			PromisedDate: &model.PromisedDate{
				DateRange: &model.DateRange{
					StartDate: ptrString("2025-05-01"),
					EndDate:   ptrString("2025-05-01"),
				},
				ServiceCategory: ptrString("standard"),
				TimeRange: &model.TimeRange{
					StartTime: ptrString("08:00"),
					EndTime:   ptrString("18:00"),
				},
			},
			References: []*model.Reference{
				{Type: ptrString("internal"), Value: ptrString("INT-0001")},
			},
			ExtraFields: []*model.KeyValuePair{
				{Key: "destinationPoliticalAreaID", Value: "893f5624-a01f-4f78-94f3-2d6f67abb6f6"},
			},
			Carrier: &model.Carrier{
				NationalID: ptrString("76234829-1"),
				Name:       ptrString("Transporte Springfield S.A."),
			},
			Vehicle: &model.Vehicle{
				Plate: ptrString("ABCZ11"),
			},
			Driver: &model.Driver{
				NationalID: ptrString("11222333-4"),
				Name:       ptrString("Otto Mann"),
				Email:      ptrString("otto.mann@example.com"),
			},
			Route: &model.Route{
				RouteID:       ptrString("ROUTE-001"),
				LpnContainer:  ptrString("000000009999214553"),
				RoutePosition: ptrInt(1),
			},
			GroupBy: &model.GroupBy{
				Type:  ptrString("parentOrder"),
				Value: ptrString("23401234123"),
			},
			Delivery: &model.Delivery{
				EvidencePhotos: []*model.EvidencePhoto{
					&model.EvidencePhoto{
						TakenAt: ptrString("2025-05-10T02:22:07Z"),
						Type:    ptrString("HOUSE_NUMBER"),
						URL:     ptrString("ignaciojeria.github.io"),
					},
				},
				Status:    ptrString("planned,in_route,on_its_way,delivered,undelivered"),
				HandledAt: ptrString("2025-05-10T02:22:07Z"),
				Failure: &model.DeliveryFailure{
					Detail:      ptrString("No se encontraba el destinatario"),
					Reason:      ptrString("absent"),
					ReferenceID: ptrString("REF123"),
				},
				Location: &model.DeliveryLocation{
					Latitude:  ptrFloat64(-33.45),
					Longitude: ptrFloat64(-70.66),
				},
				Recipient: &model.DeliveryRecipient{
					FullName:   ptrString("Pedro Gómez"),
					NationalID: ptrString("11111111-1"),
				},
			},
		},
	}

	// Verificar si hay más páginas
	hasNextPage := len(ordersData) > limit
	if hasNextPage {
		ordersData = ordersData[:limit] // quitar el elemento extra
	}

	// Construir edges
	edges := make([]*model.DeliveryUnitsReportEdge, len(ordersData))
	for i, order := range ordersData {
		// En una aplicación real, usarías un ID único como orderID
		orderID := strconv.Itoa(i + 1)
		if afterID != "" {
			// Si hay un cursor, incrementar el índice basado en él
			afterIDInt, _ := strconv.Atoi(afterID)
			orderID = strconv.Itoa(afterIDInt + i + 1)
		}

		cursor := base64.StdEncoding.EncodeToString([]byte(orderID))
		edges[i] = &model.DeliveryUnitsReportEdge{
			Cursor: cursor,
			Node:   order,
		}
	}

	// Construir pageInfo con todos los campos requeridos
	var startCursor, endCursor string
	if len(edges) > 0 {
		startCursor = edges[0].Cursor
		endCursor = edges[len(edges)-1].Cursor
	}

	// Determinar hasPreviousPage
	// En una implementación real, esto dependería de tu lógica de paginación
	hasPreviousPage := false
	if after != nil {
		hasPreviousPage = true // Si hay un cursor 'after', entonces hay páginas previas
	}

	pageInfo := &model.PageInfo{
		HasNextPage:     hasNextPage,
		HasPreviousPage: hasPreviousPage,
		StartCursor:     &startCursor, // Ahora usamos la variable
		EndCursor:       endCursor,
	}
	/*
		r.SearchOrders(ctx, mapper.MapOrderFilterWithPagination(filter, domain.Pagination{
			First:  first,
			Last:   last,
			After:  after,
			Before: before,
		}, requestedFields))
	*/
	return &model.DeliveryUnitsReportConnection{
		Edges:    edges,
		PageInfo: pageInfo,
	}, nil
}

func ptrString(v string) *string    { return &v }
func ptrInt(v int) *int             { return &v }
func ptrFloat64(v float64) *float64 { return &v }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) Todos(ctx context.Context) ([]*model.Order, error) {
	// Simulamos una respuesta con datos falsos (mock)
	return []*model.Order{
		{
			ID:          "1",
			ReferenceID: "REF123",
		},
		{
			ID:          "2",
			ReferenceID: "REF456",
		},
	}, nil
}
*/
