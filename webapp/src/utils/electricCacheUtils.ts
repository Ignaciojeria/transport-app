/**
 * Utilidades para manejar el cach√© de Electric SQL
 * Con LiveQuery, la sincronizaci√≥n es autom√°tica, pero estas utilidades
 * siguen siendo √∫tiles para debug y casos edge
 */

/**
 * Limpia el cach√© local de Electric SQL
 * √ötil para debug o cuando LiveQuery no funciona correctamente
 */
export const clearElectricCache = (): void => {
  try {
    // Limpiar localStorage relacionado con Electric SQL
    const keysToRemove: string[] = []
    
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key && (
        key.includes('electric') || 
        key.includes('electric-sql') ||
        key.includes('transport_auth')
      )) {
        keysToRemove.push(key)
      }
    }
    
    keysToRemove.forEach(key => {
      console.log('üßπ Eliminando del cach√©:', key)
      localStorage.removeItem(key)
    })
    
    console.log('‚úÖ Cach√© de Electric SQL limpiado')
  } catch (error) {
    console.error('‚ùå Error al limpiar cach√© de Electric SQL:', error)
  }
}

/**
 * Verifica si hay datos en cach√© de Electric SQL
 * √ötil para debug
 */
export const hasElectricCache = (): boolean => {
  try {
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key && key.includes('electric')) {
        return true
      }
    }
    return false
  } catch (error) {
    console.error('‚ùå Error al verificar cach√©:', error)
    return false
  }
}

/**
 * Obtiene informaci√≥n del cach√© de Electric SQL para debugging
 * √ötil para diagnosticar problemas de sincronizaci√≥n
 */
export const getElectricCacheInfo = (): { keys: string[], size: number } => {
  try {
    const electricKeys: string[] = []
    let totalSize = 0
    
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key && key.includes('electric')) {
        electricKeys.push(key)
        const value = localStorage.getItem(key)
        if (value) {
          totalSize += value.length
        }
      }
    }
    
    return {
      keys: electricKeys,
      size: totalSize
    }
  } catch (error) {
    console.error('‚ùå Error al obtener info del cach√©:', error)
    return { keys: [], size: 0 }
  }
}

/**
 * Fuerza una recarga completa de la aplicaci√≥n
 * √ötil como √∫ltimo recurso cuando LiveQuery no funciona
 */
export const forceAppReload = (): void => {
  console.log('üîÑ Forzando recarga completa de la aplicaci√≥n...')
  clearElectricCache()
  
  // Tambi√©n limpiar estados de sincronizaci√≥n incremental
  try {
    // Limpiar estados de sincronizaci√≥n manualmente
    const keys = Object.keys(localStorage)
    keys.forEach(key => {
      if (key.startsWith('electric_sync_state')) {
        localStorage.removeItem(key)
      }
    })
    console.log('üßπ Estados de sincronizaci√≥n incremental limpiados')
  } catch (error) {
    console.warn('No se pudo limpiar estados de sincronizaci√≥n:', error)
  }
  
  window.location.reload()
}